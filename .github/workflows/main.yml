name: Run Ollama 
 
on: 
  workflow_dispatch:  # Manual trigger 
  schedule: 
    - cron: '0 */6 * * *'  # Run every 6 hours 
 
jobs: 
  run-ollama: 
    runs-on: ubuntu-latest 
 
    steps: 
      - name: Checkout repository 
        uses: actions/checkout@v4 
 
      - name: Install Node.js 
        uses: actions/setup-node@v4 
        with: 
          node-version: '20' 
 
      - name: Install dependencies 
        run: sudo apt update && sudo apt install -y wget curl openssh-client jq
 
      - name: Install Ollama 
        run: | 
          curl -fsSL https://ollama.com/install.sh | sh 
          echo "Ollama installed successfully!" 
 
      - name: Kill Any Existing Ollama Process 
        run: | 
          if pgrep -x "ollama" > /dev/null; then 
            echo "Ollama is already running. Stopping it..." 
            sudo pkill -9 ollama || true  # Force kill if needed, ignore errors 
            sleep 5 
          fi 
 
      - name: Start Ollama 
        run: | 
          echo "Starting Ollama..." 
          nohup ollama serve > ollama.log 2>&1 &  # Run Ollama in the background 
          sleep 10 
 
      - name: Pull DeepSeek Model 
        run: | 
          echo "Downloading deepseek-r1:1.5b model..." 
          ollama pull deepseek-r1 & 
          sleep 10 
 
      - name: Keep Alive with Periodic SSH Tunnel Refresh
        run: |
          # Define the function within the same shell scope
          start_new_tunnel() {
            echo "Setting up SSH configuration..."
            mkdir -p ~/.ssh
            echo -e "Host a.pinggy.io\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" >> ~/.ssh/config
            
            echo "Starting SSH tunnel..."
            # Capture the SSH output to a file
            ssh -p 443 -R0:localhost:11434 qr@a.pinggy.io "u:Host:localhost:11434" > tunnel_output.txt 2>&1 &
            
            sleep 10
            
            # Extract the HTTPS URL from the output
            TUNNEL_URL=$(grep "https://" tunnel_output.txt | tail -n 1)
            
            if [ ! -z "$TUNNEL_URL" ]; then
              echo "Tunnel URL found: $TUNNEL_URL"
              # Send the URL to your webserver
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"tunnel_url\": \"$TUNNEL_URL\"}" \
                https://apideepseek-r1.vercel.app/update_tunnel
              
              # Verify if the posted URL matches
              MAX_RETRIES=5
              RETRY_COUNT=0
              MATCH_FOUND=false
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$MATCH_FOUND" = false ]; do
                sleep 10  # Wait before checking
                API_RESPONSE=$(curl -s https://apideepseek-r1.vercel.app/status)
                POSTED_URL=$(echo "$API_RESPONSE" | jq -r '.current_url')
                IS_URL_VALID=$(echo "$API_RESPONSE" | jq -r '.is_url_valid')
                
                echo "Checking posted URL: $POSTED_URL"
                echo "URL validity: $IS_URL_VALID"
                echo "Against tunnel URL: $TUNNEL_URL"
                
                if [ "$POSTED_URL" = "$TUNNEL_URL" ] && [ "$IS_URL_VALID" = "true" ]; then
                  echo "URL verification successful! URLs match and URL is valid."
                  MATCH_FOUND=true
                else
                  echo "URLs don't match or URL is not valid. Retrying POST request..."
                  curl -X POST -H "Content-Type: application/json" \
                    -d "{\"tunnel_url\": \"$TUNNEL_URL\"}" \
                    https://apideepseek-r1.vercel.app/update_tunnel
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              done
              
              if [ "$MATCH_FOUND" = false ]; then
                echo "Failed to verify URL match after $MAX_RETRIES attempts"
                return 1
              fi
            else
              echo "Failed to extract tunnel URL"
              return 1
            fi
            
            echo "SSH tunnel started and verified successfully!"
          }

          # Start tunnel and retry if it fails
          while true; do
            start_new_tunnel
            if [ $? -eq 0 ]; then
              break
            fi
            echo "Tunnel setup failed, retrying in 30 seconds..."
            sleep 30
          done
