name: Run Ollama 
 
on: 
  workflow_dispatch:  # Manual trigger 
  schedule: 
    - cron: '0 */6 * * *'  # Run every 6 hours 
 
jobs: 
  run-ollama: 
    runs-on: ubuntu-latest
    timeout-minutes: 330  # 5.5 hours max runtime (just under GitHub's 6-hour limit)
 
    steps: 
      - name: Checkout repository 
        uses: actions/checkout@v4 
 
      - name: Install Node.js 
        uses: actions/setup-node@v4 
        with: 
          node-version: '20' 
 
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y wget curl jq
          npm install -g localtunnel
 
      - name: Install Ollama 
        run: | 
          curl -fsSL https://ollama.com/install.sh | sh 
          echo "Ollama installed successfully!" 
 
      - name: Kill Any Existing Ollama Process 
        run: | 
          if pgrep -x "ollama" > /dev/null; then 
            echo "Ollama is already running. Stopping it..." 
            sudo pkill -9 ollama || true  # Force kill if needed, ignore errors 
            sleep 5 
          fi 
 
      - name: Start Ollama 
        run: | 
          echo "Starting Ollama..." 
          nohup ollama serve > ollama.log 2>&1 &  # Run Ollama in the background 
          sleep 10 
 
      - name: Pull DeepSeek Model 
        run: | 
          echo "Downloading deepseek-r1:1.5b model..." 
          ollama pull deepseek-r1 & 
          sleep 10 
 
      - name: Keep Alive with Periodic Localtunnel Refresh
        run: |
          # Define the function within the same shell scope
          start_new_tunnel() {
            echo "Starting localtunnel..."
            # Kill any existing lt processes
            pkill -f "lt --port 11434" || true
            
            # Start new tunnel and capture the URL
            TUNNEL_URL=$(lt --port 11434 --print-url)
            
            if [ ! -z "$TUNNEL_URL" ]; then
              echo "Tunnel URL found: $TUNNEL_URL"
              # Send the URL to your webserver
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"url\": \"$TUNNEL_URL\"}" \
                http://alizarinkingfisher.onpella.app/set_url

              sleep 10
              # Verify if the posted URL matches
              MAX_RETRIES=5
              RETRY_COUNT=0
              MATCH_FOUND=false
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$MATCH_FOUND" = false ]; do
                sleep 10  # Wait before checking
                API_RESPONSE=$(curl -s http://alizarinkingfisher.onpella.app/status)
                POSTED_URL=$(echo "$API_RESPONSE" | jq -r '.current_target_url')
                
                echo "Checking posted URL: $POSTED_URL"
                echo "Against tunnel URL: $TUNNEL_URL"
                
                if [ "$POSTED_URL" = "$TUNNEL_URL" ]; then
                  echo "URL verification successful! URLs match."
                  MATCH_FOUND=true
                else
                  echo "URLs don't match. Retrying POST request..."
                  curl -X POST -H "Content-Type: application/json" \
                    -d "{\"url\": \"$TUNNEL_URL\"}" \
                    http://alizarinkingfisher.onpella.app/set_url
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              done
              
              if [ "$MATCH_FOUND" = false ]; then
                echo "Failed to verify URL match after $MAX_RETRIES attempts"
                return 1
              fi
            else
              echo "Failed to create tunnel"
              return 1
            fi
            
            echo "Localtunnel started and verified successfully!"
          }

          # Calculate end time (5 hours from now to allow for cleanup)
          END_TIME=$(($(date +%s) + 18000))  # 5 hours in seconds
          REFRESH_INTERVAL=3600  # 60 minutes in seconds
          LAST_REFRESH=$(date +%s)

          # Start tunnel initially
          start_new_tunnel

          # Main loop to keep the tunnel alive and refresh periodically
          while [ $(date +%s) -lt $END_TIME ]; do
            CURRENT_TIME=$(date +%s)
            
            # Check if it's time for a refresh
            if [ $((CURRENT_TIME - LAST_REFRESH)) -ge $REFRESH_INTERVAL ]; then
              echo "Time to refresh the tunnel..."
              start_new_tunnel
              LAST_REFRESH=$CURRENT_TIME
            fi
            
            # Check if Ollama is still running
            if ! pgrep -x "ollama" > /dev/null; then
              echo "Ollama process not found, restarting..."
              nohup ollama serve > ollama.log 2>&1 &
              sleep 10
            fi
            
            # Sleep for a minute before next check
            sleep 60
          done

          echo "Reached maximum runtime, shutting down..."
          pkill -f "lt --port 11434" || true
          pkill -x "ollama" || true
